<?php declare(strict_types = 1);

return PHPStan\Cache\CacheItem::__set_state(array(
   'variableKey' => '/var/www/html/vendor/phpunit/phpunit/src/Framework/MockObject/MockObject.php-1578473145',
   'data' => 
  array (
    'd6d40f70124db370c5fd1454e4575c0d' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Interface for all mock objects which are generated by
 * MockBuilder.
 *
 * @method InvocationMocker method($constraint)
 *
 * @deprecated Use PHPUnit\\Framework\\MockObject\\MockObject instead
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => NULL,
         'uses' => 
        array (
          'expectationfailedexception' => 'PHPUnit\\Framework\\ExpectationFailedException',
          'invocationmocker' => 'PHPUnit\\Framework\\MockObject\\Builder\\InvocationMocker',
          'invocation' => 'PHPUnit\\Framework\\MockObject\\Matcher\\Invocation',
        ),
         'className' => 'PHPUnit_Framework_MockObject_MockObject',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    'e7213872455cdfd3135872794721d6c3' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @return InvocationMocker
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => NULL,
         'uses' => 
        array (
          'expectationfailedexception' => 'PHPUnit\\Framework\\ExpectationFailedException',
          'invocationmocker' => 'PHPUnit\\Framework\\MockObject\\Builder\\InvocationMocker',
          'invocation' => 'PHPUnit\\Framework\\MockObject\\Matcher\\Invocation',
        ),
         'className' => 'PHPUnit_Framework_MockObject_MockObject',
         'functionName' => '__phpunit_setOriginalObject',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '37a7b96eb532b47001e4359f7ae2033e' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @return InvocationMocker
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => NULL,
         'uses' => 
        array (
          'expectationfailedexception' => 'PHPUnit\\Framework\\ExpectationFailedException',
          'invocationmocker' => 'PHPUnit\\Framework\\MockObject\\Builder\\InvocationMocker',
          'invocation' => 'PHPUnit\\Framework\\MockObject\\Matcher\\Invocation',
        ),
         'className' => 'PHPUnit_Framework_MockObject_MockObject',
         'functionName' => '__phpunit_getInvocationMocker',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '5f382974b6139eb1ff47706d87441db5' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Verifies that the current expectation is valid. If everything is OK the
     * code should just return, if not it must throw an exception.
     *
     * @throws ExpectationFailedException
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => NULL,
         'uses' => 
        array (
          'expectationfailedexception' => 'PHPUnit\\Framework\\ExpectationFailedException',
          'invocationmocker' => 'PHPUnit\\Framework\\MockObject\\Builder\\InvocationMocker',
          'invocation' => 'PHPUnit\\Framework\\MockObject\\Matcher\\Invocation',
        ),
         'className' => 'PHPUnit_Framework_MockObject_MockObject',
         'functionName' => '__phpunit_verify',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '97237f45bd3cb02e5fda901a3d3a9aa4' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * @return bool
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => NULL,
         'uses' => 
        array (
          'expectationfailedexception' => 'PHPUnit\\Framework\\ExpectationFailedException',
          'invocationmocker' => 'PHPUnit\\Framework\\MockObject\\Builder\\InvocationMocker',
          'invocation' => 'PHPUnit\\Framework\\MockObject\\Matcher\\Invocation',
        ),
         'className' => 'PHPUnit_Framework_MockObject_MockObject',
         'functionName' => '__phpunit_hasMatchers',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
    '57e3abb0558670b4e8a7376a89096afb' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
     * Registers a new expectation in the mock object and returns the match
     * object which can be infused with further details.
     *
     * @return InvocationMocker
     */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => NULL,
         'uses' => 
        array (
          'expectationfailedexception' => 'PHPUnit\\Framework\\ExpectationFailedException',
          'invocationmocker' => 'PHPUnit\\Framework\\MockObject\\Builder\\InvocationMocker',
          'invocation' => 'PHPUnit\\Framework\\MockObject\\Matcher\\Invocation',
        ),
         'className' => 'PHPUnit_Framework_MockObject_MockObject',
         'functionName' => 'expects',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
        )),
      )),
    )),
  ),
));